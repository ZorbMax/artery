//
// Generated file, do not edit! Created by nedtool 5.6 from HBMessage.msg.
//

#ifndef __HBMESSAGE_M_H
#define __HBMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <vanetza/security/basic_elements.hpp>
#include <vanetza/security/certificate.hpp>
#include <vanetza/security/signature.hpp>
#include <vector>
// }}

/**
 * Class generated from <tt>HBMessage.msg:27</tt> by nedtool.
 * <pre>
 * packet HBMessage
 * {
 *     simtime_t mTimestamp;
 *     vanetza::security::HashedId8 PRL[];
 *     vanetza::security::EcdsaSignature mSignature;
 *     vanetza::security::Certificate mSignerCertificate;
 * }
 * </pre>
 */
class HBMessage : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::simtime_t mTimestamp;
    vanetza::security::HashedId8 *PRL; // array ptr
    unsigned int PRL_arraysize;
    vanetza::security::EcdsaSignature mSignature;
    vanetza::security::Certificate mSignerCertificate;

  private:
    void copy(const HBMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HBMessage&);

  public:
    HBMessage(const char *name=nullptr, short kind=0);
    HBMessage(const HBMessage& other);
    virtual ~HBMessage();
    HBMessage& operator=(const HBMessage& other);
    virtual HBMessage *dup() const override {return new HBMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getMTimestamp() const;
    virtual void setMTimestamp(::omnetpp::simtime_t mTimestamp);
    virtual void setPRLArraySize(unsigned int size);
    virtual unsigned int getPRLArraySize() const;
    virtual vanetza::security::HashedId8& getPRL(unsigned int k);
    virtual const vanetza::security::HashedId8& getPRL(unsigned int k) const {return const_cast<HBMessage*>(this)->getPRL(k);}
    virtual void setPRL(unsigned int k, const vanetza::security::HashedId8& PRL);
    virtual vanetza::security::EcdsaSignature& getMSignature();
    virtual const vanetza::security::EcdsaSignature& getMSignature() const {return const_cast<HBMessage*>(this)->getMSignature();}
    virtual void setMSignature(const vanetza::security::EcdsaSignature& mSignature);
    virtual vanetza::security::Certificate& getMSignerCertificate();
    virtual const vanetza::security::Certificate& getMSignerCertificate() const {return const_cast<HBMessage*>(this)->getMSignerCertificate();}
    virtual void setMSignerCertificate(const vanetza::security::Certificate& mSignerCertificate);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HBMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HBMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __HBMESSAGE_M_H

