//
// Generated file, do not edit! Created by nedtool 5.6 from V2VMessage.msg.
//

#ifndef __V2VMESSAGE_M_H
#define __V2VMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <vanetza/security/certificate.hpp>
#include <vanetza/security/signature.hpp>
#include <string>
// }}

/**
 * Class generated from <tt>V2VMessage.msg:19</tt> by nedtool.
 * <pre>
 * packet V2VMessage
 * {
 *     simtime_t timestamp;                      // Timestamp of the message
 *     vanetza::security::Certificate certificate;  // Certificate of the sender
 *     vanetza::security::EcdsaSignature signature; // Signature of the message
 *     string payload;                            // Payload of the message
 * }
 * </pre>
 */
class V2VMessage : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::simtime_t timestamp;
    vanetza::security::Certificate certificate;
    vanetza::security::EcdsaSignature signature;
    ::omnetpp::opp_string payload;

  private:
    void copy(const V2VMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const V2VMessage&);

  public:
    V2VMessage(const char *name=nullptr, short kind=0);
    V2VMessage(const V2VMessage& other);
    virtual ~V2VMessage();
    V2VMessage& operator=(const V2VMessage& other);
    virtual V2VMessage *dup() const override {return new V2VMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
    virtual vanetza::security::Certificate& getCertificate();
    virtual const vanetza::security::Certificate& getCertificate() const {return const_cast<V2VMessage*>(this)->getCertificate();}
    virtual void setCertificate(const vanetza::security::Certificate& certificate);
    virtual vanetza::security::EcdsaSignature& getSignature();
    virtual const vanetza::security::EcdsaSignature& getSignature() const {return const_cast<V2VMessage*>(this)->getSignature();}
    virtual void setSignature(const vanetza::security::EcdsaSignature& signature);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const V2VMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, V2VMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __V2VMESSAGE_M_H

