//
// Generated file, do not edit! Created by nedtool 5.6 from EnrollmentRequest.msg.
//

#ifndef __ENROLLMENTREQUEST_M_H
#define __ENROLLMENTREQUEST_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


// cplusplus {{
#include <vanetza/security/ecdsa256.hpp>

#include <string>
// }}

/**
 * Class generated from <tt>EnrollmentRequest.msg:12</tt> by nedtool.
 * <pre>
 * packet EnrollmentRequest
 * {
 *     string vehicleId;
 *     vanetza::security::ecdsa256::PublicKey publicKey;
 * }
 * </pre>
 */
class EnrollmentRequest : public ::omnetpp::cPacket
{
protected:
    ::omnetpp::opp_string vehicleId;
    vanetza::security::ecdsa256::PublicKey publicKey;

private:
    void copy(const EnrollmentRequest& other);

protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EnrollmentRequest&);

public:
    EnrollmentRequest(const char* name = nullptr, short kind = 0);
    EnrollmentRequest(const EnrollmentRequest& other);
    virtual ~EnrollmentRequest();
    EnrollmentRequest& operator=(const EnrollmentRequest& other);
    virtual EnrollmentRequest* dup() const override { return new EnrollmentRequest(*this); }
    virtual void parsimPack(omnetpp::cCommBuffer* b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer* b) override;

    // field getter/setter methods
    virtual const char* getVehicleId() const;
    virtual void setVehicleId(const char* vehicleId);
    virtual vanetza::security::ecdsa256::PublicKey& getPublicKey();
    virtual const vanetza::security::ecdsa256::PublicKey& getPublicKey() const { return const_cast<EnrollmentRequest*>(this)->getPublicKey(); }
    virtual void setPublicKey(const vanetza::security::ecdsa256::PublicKey& publicKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer* b, const EnrollmentRequest& obj)
{
    obj.parsimPack(b);
}
inline void doParsimUnpacking(omnetpp::cCommBuffer* b, EnrollmentRequest& obj)
{
    obj.parsimUnpack(b);
}


#endif  // ifndef __ENROLLMENTREQUEST_M_H
