//
// Generated file, do not edit! Created by nedtool 5.6 from CRLMessage.msg.
//

#ifndef __CRLMESSAGE_M_H
#define __CRLMESSAGE_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


// cplusplus {{
#include <vanetza/security/basic_elements.hpp>
#include <vanetza/security/certificate.hpp>
#include <vanetza/security/signature.hpp>

#include <vector>
// }}

/**
 * Class generated from <tt>CRLMessage.msg:27</tt> by nedtool.
 * <pre>
 * message CRLMessage
 * {
 *     simtime_t mTimestamp;
 *     vanetza::security::HashedId8 mRevokedCertificates[]; // Array of HashedId8
 *     vanetza::security::EcdsaSignature mSignature;
 *     vanetza::security::Certificate mSignerCertificate;
 * }
 * </pre>
 */
class CRLMessage : public ::omnetpp::cPacket
{
protected:
    ::omnetpp::simtime_t mTimestamp;
    vanetza::security::HashedId8* mRevokedCertificates;  // array ptr
    unsigned int mRevokedCertificates_arraysize;
    vanetza::security::EcdsaSignature mSignature;
    vanetza::security::Certificate mSignerCertificate;

private:
    void copy(const CRLMessage& other);

protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CRLMessage&);

public:
    CRLMessage(const char* name = nullptr, short kind = 0);
    CRLMessage(const CRLMessage& other);
    virtual ~CRLMessage();
    CRLMessage& operator=(const CRLMessage& other);
    virtual CRLMessage* dup() const override { return new CRLMessage(*this); }
    virtual void parsimPack(omnetpp::cCommBuffer* b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer* b) override;

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getMTimestamp() const;
    virtual void setMTimestamp(::omnetpp::simtime_t mTimestamp);
    virtual void setMRevokedCertificatesArraySize(unsigned int size);
    virtual unsigned int getMRevokedCertificatesArraySize() const;
    virtual vanetza::security::HashedId8& getMRevokedCertificates(unsigned int k);
    virtual const vanetza::security::HashedId8& getMRevokedCertificates(unsigned int k) const
    {
        return const_cast<CRLMessage*>(this)->getMRevokedCertificates(k);
    }
    virtual void setMRevokedCertificates(unsigned int k, const vanetza::security::HashedId8& mRevokedCertificates);
    virtual vanetza::security::EcdsaSignature& getMSignature();
    virtual const vanetza::security::EcdsaSignature& getMSignature() const { return const_cast<CRLMessage*>(this)->getMSignature(); }
    virtual void setMSignature(const vanetza::security::EcdsaSignature& mSignature);
    virtual vanetza::security::Certificate& getMSignerCertificate();
    virtual const vanetza::security::Certificate& getMSignerCertificate() const { return const_cast<CRLMessage*>(this)->getMSignerCertificate(); }
    virtual void setMSignerCertificate(const vanetza::security::Certificate& mSignerCertificate);
};

inline void doParsimPacking(omnetpp::cCommBuffer* b, const CRLMessage& obj)
{
    obj.parsimPack(b);
}
inline void doParsimUnpacking(omnetpp::cCommBuffer* b, CRLMessage& obj)
{
    obj.parsimUnpack(b);
}


#endif  // ifndef __CRLMESSAGE_M_H
